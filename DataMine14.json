[{"question": "What does #include stdio.h does in c language.?", "option1": "A) It includes stdio.h into existing C program.", "option2": "B) #include increases the size of C program by including the specified file contents like functions, constants etc.", "option3": "C) #include includes specified file before compilation.", "option4": "D) All the above", "ans": "D"}, {"question": "What is the abbreviation of C STDIO in stdio.h.?", "option1": "A) Standard Input Output", "option2": "B) String Terminating Operations Input Output", "option3": "C) Store Input Output", "option4": "D) None of the above", "ans": "A"}, {"question": "Choose a correct statement about #include<stdio.h>.?", "option1": "A) A file named stdio.h will be searched in all directories and included if found", "option2": "B) A file named stdio.h will be searched in current directory and included if found", "option3": "C) A file named stdio.h will be searched in current directory and pre configured list of directories in search path and included if found", "option4": "D) None of the above", "ans": "B"}, {"question": "Choose a correct C statement about #include\"", "option1": "A) A file named stdio.h will be searched in all directories and included if found", "option2": "B) A file named stdio.h will be searched in current directory and included if found", "option3": "C) A file named stdio.h will be searched in current directory and pre configured list of directories in search path and included if found", "option4": "D) None of the above", "ans": "C"}, {"question": "In Turbo C, Search Path of Directories for #Include is mentioned under the option.?", "option1": "A) Include Directories", "option2": "B) Exclude Directories", "option3": "C) Add Directories", "option4": "D) Extra Directories", "ans": "A"}, {"question": "Choose a correct form of using C Conditional Compilation commands IF ELSE .?", "option1": "A) #IF macroname\n    statement1;\n    statement2;\n#ELSE\n    statement3;\n    statement4;\n#END", "option2": "B) #IF macroname\n    statement1;\n    statement2;\n#ELSE\n    statement3;\n    statement4;\n#ENDIF", "option3": "C) #IFDEF macroname\n    statement1;\n    statement2;\n#ELSE\n    statement3;\n    statement4;\n#ENDIF", "option4": "D) #ifdef macroname\n    statement1;\n    statement2;\n#else\n    statement3;\n    statement4;\n#endif", "ans": "D"}, {"question": "What is the output of C program with conditional compilation commands.?\n#define CVV 156\nint main()\n{\n    #ifdef CVV\n        printf(\"CVV YES\");\n    #else\n        printf(\"CVV NO\");\n    #endif\n    return 0;\n}", "option1": "A) 156", "option2": "B) printf(\"CVV YES\");", "option3": "C) CVV YES", "option4": "D) CVV NO", "ans": "C"}, {"question": "What is the output of C program with conditional compilation commands.?#define CVV 156\nint main()\n{\n    #ifdef cvv\n        printf(\"CVV YES\");\n    #else\n        printf(\"CVV NO\");\n    #endif\n    return 0;\n}", "option1": "A) printf(\"CVV YES\");", "option2": "B) CVV YES", "option3": "C) CVV NO", "option4": "D) Compiler error", "ans": "C"}, {"question": "What is the output of C program with preprocessor directives.?\nint main()\n{\n    #ifdef CVV\n        printf(\"CVV YES\");\n    #else\n        #define CVV 199\n    #endif\n    printf(\"NEW CVV=%d\",CVV);\n    return 0;\n}", "option1": "A) CVV 199", "option2": "B) printf(\"CVV YES\");", "option3": "C) CVV YES", "option4": "D) NEW CVV=199", "ans": "D"}, {"question": " What is the output of C program.?\nint main()\n{\n    #ifndef CVV\n        #define CVV 199\n        printf(\"CVV=%d\", CVV);\n    #else\n        printf(\"CVV=%d\", 188);\n    #endif\n    return 0;\n}", "option1": "A) CVV=188", "option2": "B) CVV=0", "option3": "C) CVV=199", "option4": "D) Compiler error", "ans": "C"}, {"question": " What is the output of C program with Preprocessor directives.?\nvoid show();\nint main()\n{\n    #ifndef CVV\n        #define CVV 199\n    #endif\n    show();\n    return 0;\n}\nvoid show()\n{\n    printf(\"CVV=%d\",CVV);\n}", "option1": "A) No output", "option2": "B) CVV=0", "option3": "C) CVV=199", "option4": "D) Compiler error", "ans": "C"}, {"question": " What is the output of C program with preprocessor directives.?\nint main()\n{\n    #ifdef CVV\n        #define CVV 199\n    #elif PVV\n        printf(\"Inside ELIF\");\n    #else\n        printf(\"Inside ELSE\");\n    #endif\n    return 0;\n}", "option1": "A) Inside ELIF", "option2": "B) Inside ELSE", "option3": "C) No output", "option4": "D) Compiler error", "ans": "B"}, {"question": " What is the output of C program with #undef.?\n#define BIRD 5\nint main()\n{\n    #ifdef BIRD\n        printf(\"BIRD=5.\");\n    #else\n        printf(\"UNKNOWN.\");\n    #endif\n    #undef BIRD\n    #define BIRD 10\n    printf(\"BIRD=%d\",BIRD);\n    return 0;\n}", "option1": "A) BIRD=5.BIRD=5", "option2": "B) BIRD=10.BIRD=10", "option3": "C) BIRD=5.BIRD=10", "option4": "D) Compiler error", "ans": "C"}, {"question": " What is the output of C program with #undef.?\nint main()\n{\n    #undef BIRD\n    printf(\"OKAY\");\n    return 0;\n}", "option1": "A) OKAY", "option2": "B) Compiler error", "option3": "C) BIRDOKAY", "option4": "D) None of the above", "ans": "A"}, {"question": " What is a Pragma in C language.?", "option1": "A) A Pragma may be an instruction to build tool to process or generate comments", "option2": "B) A Pragma may be an instruction to compiler to execute specific functions at specific times say startup or exit of program.", "option3": "C) A pragma may be an instruction to tell compiler to ignore certain warnings.", "option4": "D) All the above", "ans": "D"}, {"question": " What is the C Pragma directive or command to execute a particular function at startup of program.?", "option1": "A) #pragma start function1", "option2": "B) #pragma statup function1", "option3": "C) #pragma startnow function1", "option4": "D) #prama startup function1", "ans": "B"}, {"question": " What is the output of C program with Pragma.?\nvoid show1();\nvoid show2();\n#pragma startup show1\n#pragma exit show2\nint main()\n{\n    printf(\"MAIN.\");\n}\nvoid show1()\n{\n    printf(\"START.\");\n}\nvoid show2()\n{\n    printf(\"END.\");\n}\n", "option1": "A) MAIN.START.END.", "option2": "B) START.MAIN.END", "option3": "C) START.END.MAIN", "option4": "D) END.START.MAIN", "ans": "B"}, {"question": " At what stage of building a C program does Pragma work.?", "option1": "A) Before Compilation", "option2": "B) After compilation", "option3": "C) After Linking", "option4": "D) None of the above", "ans": "A"}, {"question": " Choose a correct implementation of C Pragma Warning.?", "option1": "A) #pragma warn -par", "option2": "B) #pragma warn -rch", "option3": "C) #pragma warn -rvl", "option4": "D) All the above", "ans": "D"}, {"question": " Choose a correct statement about C Macro.?", "option1": "A) A Macro name can be in lower or upper case.", "option2": "B) A Macro can be nested. It can use another macro as part of its implementation. #define CVV 2*OLDCVV. Here OLDCVV is another macro defined prior to Macro CVV.", "option3": "C) Control is not passed to Macro as it is like just a dummy String(eg. CVV)\u00a0Replacement technique with implementation (Macro Expansion part)", "option4": "D) All the above", "ans": "D"}]
