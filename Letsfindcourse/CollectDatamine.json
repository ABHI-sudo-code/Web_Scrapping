[{"question": "Who is father of C Language?", "option1": "Bjarne Stroustrup", "option2": "James A. Gosling", "option3": "Dennis Ritchie", "option4": "Dr. E.F. Codd", "ans": " : C Explanation: The C programming language was developed in 1972 by Dennis Ritchie in the Bell Laboratories of the AT & T (American Telephone & Telegraph),located in U.S.A.Dennis Ritchie is known as the founder of c language."}, {"question": "C Language was developed at ?", "option1": "AT & T Bell Laboratory", "option2": "MIT University", "option3": "Harvard University", "option4": "Stanford Lab", "ans": " : A Explanation: Dennis Ritchie developed the C programming language at Bell laboratories during 1970s"}, {"question": "Many features of C were derived from which language ?", "option1": "PASCAL", "option2": "B", "option3": "BASIC", "option4": "FORTRAN", "ans": " : B Explanation: Richie and Thompson wanted to rewrite the operating system in B, a language they had previously developed, but B were typeworthy, and therefore mixed bits / words were not well suited for address and PDP-11 type . B was a simplified version of Thompson's BCPL, which was more ALGOL than the language."}, {"question": "What is C language?", "option1": "C language is a structure/procedure oriented", "option2": "C language is a middle level programming language", "option3": "C language was invented for implementing UNIX operating system", "option4": "All of the above", "ans": " : D Explanation: C language is just a high level computer language. High level languages help Human beings to express Logic. Computers dont understand this language. So, you need a mediator. This mediator is usually a Compiler or Interpreter. In case of \u00e2\u20ac\u02dcC\u00e2\u20ac\u2122, we have a compiler. The compiler translates the logic expressed in C into Machine Code which is the language of computers."}, {"question": "First version of C Programming language is ____ .", "option1": "K&R", "option2": "C89", "option3": "ANSI", "option4": "R&K", "ans": " : A Explanation: In 1978, Brian Kernighan and Dennis Ritchie published the first edition of The C Programming Language known as \"K&R\" ."}, {"question": "C was initially used for", "option1": "General purpose", "option2": "System development work", "option3": "Data processing", "option4": "None of these", "ans": " : B Explanation: C was initially used for system development work, particularly the programs that make-up the operating system."}, {"question": "C programming language is", "option1": "Procedural language", "option2": "Object Oriented language", "option3": "Scripting languages", "option4": "None of these", "ans": " : A Explanation: C programs follow a procedure of steps written in it, called functions. It follows a top-down approach i.e. much importance is given to flow of program rather than on data on which functions operate."}, {"question": "Which Committee standardize C Programming Language ?", "option1": "IEEE", "option2": "ISO", "option3": "IEC", "option4": "ANSI", "ans": " : D Explanation: American National Standards Institute.ANSI C (these days better known as C89) was the first standardized form of the C language."}, {"question": "Which year C language is developed?", "option1": "1970", "option2": "1971", "option3": "1972", "option4": "1973", "ans": " : C Explanation: C programming language was developed at Bell Laboratories in 1972 by Dennis Ritchie."}, {"question": " Which of these is not an example for IDE in C?", "option1": "Turbo", "option2": "Pycharm", "option3": "Code::Blocks", "option4": "Borland", "ans": " : B Explanation: Pycharm used for python"},
{"question": "1.\u00a0What is the output of this program?\n#include <stdio.h>\r\nint main()\r\n{\r\n\tprintf(\"variable! %d\", x);\r\n    return 0;\r\n}", "option1": "variable! x", "option2": "variable! followed by a junk value", "option3": "Compile time error", "option4": "variable!", "ans": "Ans : C Explanation: It will give compile time error since x is not declared."}, {"question": "2.\u00a0What is the output of this program?\n#include <stdio.h>\r\nint main()\r\n{\r\n    int main = 3;\r\n    printf(\"%d\", main);\r\n    return 0;\r\n}", "option1": "3", "option2": "Compile time error", "option3": "Run time error", "option4": "give garbage value", "ans": "Ans : A Explanation: A C program can have same function name and same variable name."}, {"question": "3.\u00a0What is the output of this program? if input a is 1 and b is 2\n#include <stdio.h>\r\nint main()\r\n{\r\n    int a, b;\r\n    printf(\"%d\", scanf(\"%d %d\",&a,&b));\r\n    return 0;\r\n}\r\n", "option1": "1", "option2": "2", "option3": "runtime error", "option4": "compile time error", "ans": "Ans : B Explanation: In C, scanf returns the number of inputs it has successfully read."}, {"question": "4.\u00a0What is the output of this program?\n\r\n#include <stdio.h>\r\nvoid main()\r\n{\r\n    printf(\"hello\\rworld\\n\");\r\n    printf(\"hello\\b\\b\\bworld\\n\");\r\n}\r\n", "option1": "hello  helloworld", "option2": "world  heworld", "option3": "helloworld  hellold", "option4": "None of the mentioned", "ans": "Ans : B Explanation: \"\b\" for a backspace, means if u print it, cursor will print and come back 1 character . '\r' is used for carriage return to come 1 line back or in start of line."}, {"question": "5.\u00a0What is the output of this program?\n\r\n#include <stdio.h>\r\nint main()\r\n{\r\n    int i;\r\n    i = printf(\"letsfindcourse\");\r\n    i = printf(\"%d \", i);\r\n    printf(\"%d \", i);\r\n    return 0;\r\n}\r\n", "option1": " letsfindcourse 15 3", "option2": "letsfindcourse 14 2", "option3": "letsfindcourse 14 3", "option4": "Compilation Error", "ans": "Ans : C Explanation: In C, printf() returns the number of characters successfully written on the output. Here letsfindcourse contain 14 character therefore i = 14 and then i is printed now again value of printf is assign but this time it print 3 since it contain 3 character %,d and space."}, {"question": "6.\u00a0Output of this statment is :\n \r\nprintf ( \"%d\" , printf ( \"hello\" ) );\r\n", "option1": "Syntex Error", "option2": "hello5", "option3": "gives garbage value", "option4": "print hello and terminates", "ans": "Ans : B Explanation: Firstly inner printf executes and will print hello now this return the number of character printed that is 5 and this will be printed by outer printf . Hence output is hello5"}, {"question": "7.\u00a0What is the output of this program?\n\r\n#include <stdio.h>\r\n# define scanf  \"%s Find best course \"\r\nmain()\r\n{\r\n   printf(scanf, scanf);\r\n   return 0;\r\n}\r\n", "option1": "%s Find best course Find best course", "option2": "%s Find best course %s Find best course", "option3": "Invalid Syntex", "option4": "Run time error", "ans": "Ans : A Explanation: printf statement will become printf(\"%s Find best course \",  \"%s Find best course \");"}, {"question": "8.\u00a0Which statment is true about the given code ?\n\r\n#include <stdio.h>\r\nint main()\r\n{\r\n  printf(\"%d\", main);\r\n  return 0;\r\n}\r\n", "option1": "Goes in infinite loop", "option2": "Gives Address of function main.", "option3": "Gives garbage value", "option4": "Compilation Error", "ans": "Ans : B Explanation: Name of the function is actually a pointer variable to the function and prints the address of the function."}, {"question": "9.\u00a0What is the output of this program?\n\r\n#include <stdio.h>\r\nint main()\r\n{\r\n    int i;\r\n    i = 1, 2, 3;     \r\n    printf(\"%d\", i);\r\n    return 0;\r\n}\r\n", "option1": "1", "option2": "2", "option3": "3", "option4": "Invalid Syntax", "ans": "Ans : A Explanation: Associativity of comma operator is from left to right, but = operator has higher precedence than comma operator.Therefore the statement i = 1, 2, 3 is treated as i = 1 ."}, {"question": "10.\u00a0Comment on the given statment:\n\r\nscanf(\"%d\",i);\r\n", "option1": "Will execute without any error", "option2": "Will give Segmentation fault", "option3": "Will give Compilation Error", "option4": "None of the above", "ans": "Ans : B Explanation: A segmentation fault occurs when a program attempts to access a memory location that it is not allowed to access, or attempts to access a memory location in a way that is not allowed.So as we can see segmentation fault occurs because  program attempts to access a memory location that it is not allowed to access."},
{"question": "1.\u00a0How many keywords are there in c ?\n", "option1": "31", "option2": "32", "option3": "64", "option4": "63", "ans": "Ans : B Explanation: There are total 32 keywords in C.Keywords are those words whose meaning is already defined by Compiler.C Keywords are also called as Reserved words."}, {"question": "2.\u00a0Which of the following is true for variable names in C?\n", "option1": "Variable names cannot start with a digit", "option2": "Variable can be of any length", "option3": "They can contain alphanumeric characters as well as special characters", "option4": "Reserved Word can be used as variable name", "ans": "Ans : A Explanation: Variable names cannot start with a digit in C Programming language."}, {"question": "3.\u00a0Which of the following cannot be a variable name in C?\n", "option1": "TRUE", "option2": "friend", "option3": "export", "option4": "volatile", "ans": "Ans : D Explanation: volatile is C keyword.Volatile in C programming language signify that the compiler that the software in hand (the thread for the routine it\u2019s compiling) doesn\u2019t have exclusive control over the variable described as \"volatile\""}, {"question": "4.\u00a0What is the output of this program?\n        \r\nvoid main()\r\n{\r\nint x = 10;\r\nfloat x = 10;\r\nprintf(\"%d\", x)\r\n}", "option1": "Compilations Error", "option2": "10", "option3": "10", "option4": "10.1", "ans": "Ans : A Explanation: Since the variable x is defined both as integer and as float, it results in an error."}, {"question": "5.\u00a0What is the output of this program?\n\r\n    #include <stdio.h>\r\n    int main()\r\n    {\r\n        int i;\r\n        for (i = 0;i < 5; i++)\r\n        int a = i;\r\n        printf(\"%d\", a);\r\n    }", "option1": "Syntax error in declaration of a", "option2": "No errors, program will show the output 5", "option3": "Redeclaration of a in same scope throws error", "option4": "a is out of scope when printf is called", "ans": "Ans : A Explanation: the output of this program is the Syntax error in declaration of variable a."}, {"question": "6.\u00a0What is the output of this program?\n\r\n  #include <stdio.h>\r\n  int var = 20;\r\n  int main()\r\n  {\r\n    int var = var;\r\n    printf(\"%d \", var);\r\n    return 0;\r\n  }", "option1": "Garbage Value", "option2": "20", "option3": "Compiler Error", "option4": "None of these", "ans": "Ans : A Explanation: First var is declared, then value is assigned to it. As soon as var is declared as a local variable, it hides the global variable var."}, {"question": "7.\u00a0What is the output of this program?\n\t\t \r\nvoid main()\r\n{\r\n      int p, q, r, s;\r\n      p = 1;\r\n      q = 2;\r\n      r = p, q;\r\n      s = (p, q);\r\n      printf(\"p=%d q=%d\", p, q);\r\n}", "option1": "p=1 q=1", "option2": "p=1 q=2", "option3": "p=2 q=2", "option4": "Invalid Syntex", "ans": "Ans : B Explanation: The comma operator evaluates both of its operands and produces the value of the second. It also has lower precedence than assignment. Hence r = p, q is equivalent to r = p, while s = (p, q) is equivalent to s = q."}, {"question": "8.\u00a0What is the output of this program?\n\r\nvoid main()\r\n{\r\n   printf(\"%x\",-1<<4);\r\n}", "option1": "fff0", "option2": "fff1", "option3": "fff2", "option4": "fff3", "ans": "Ans : A Explanation: -1 will be represented in binary form as:\r\n1111 1111 1111 1111\r\n\r\nNow -1<<4 means 1 is Shifted towards left by 4 positions, hence it becomes:\r\n1111 1111 1111 0000 in hexadecimal form - fff0."}, {"question": "9.\u00a0What is the output of this program?\n\r\n#include <stdio.h>\r\nvoid main()\r\n{\r\n   int a=1, b=2, c=3, d;\r\n   d = (a=c, b+=a, c=a+b+c);\r\n   printf(\"%d %d %d %d\", d, a, b, c);\r\n}", "option1": "11 3 5 11", "option2": "11 1 5 11", "option3": "11 3 2 11", "option4": "11 3 3 11", "ans": "Ans : A Explanation: For any comma separated expression the outcome is the right most part."}, {"question": "10.\u00a0What is the output of this program?\n\r\nvoid main()\r\n{\r\n   int a, b = 5, c;\r\n   a = 5 * (b++);\r\n   c = 5 * (++b);\r\n   printf(\"%d %d\",a,c);\r\n}", "option1": "30 35", "option2": "30 30", "option3": "25 30", "option4": "25 35", "ans": "Ans : D Explanation: a  =  5 * 5 and b = 5 * 7"},
{"question": "1.\u00a0In the following loop construct, which one is executed only once always.\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0for(exp1; exp2; exp3)\n", "option1": "exp1", "option2": "exp3", "option3": "exp1 and exp3", "option4": "exp1, exp2 and exp3", "ans": "Ans : A Explanation: Expression exp1 is executed only once since this is used for initialization"}, {"question": "2.\u00a0The continue statment cannot be used with\n", "option1": "for", "option2": "while", "option3": "do while", "option4": "switch", "ans": "Ans : D Explanation: continue is used to skip the statments and can not be used with switch"}, {"question": "3.\u00a0Which keyword can be used for coming out of recursion?\n", "option1": "return", "option2": "break", "option3": "exit", "option4": "both A and B", "ans": "Ans : A Explanation: Return is used for coming out of recursion"}, {"question": "4.\u00a0goto can be used to jump from main to within a function?\n", "option1": "TRUE", "option2": "FALSE", "option3": "May Be", "option4": "Can't Say", "ans": "Ans : B Explanation: goto statement in C programming provides an unconditional jump from the 'goto' to a labeled statement in the same function."}, {"question": "5.\u00a0Which of the following is an invalid if-else statement?\n", "option1": "if (if (a == 1)){}", "option2": "if (a){}", "option3": "if ((char) a){}", "option4": "if (func1 (a)){}", "ans": "Ans : A Explanation: None"}, {"question": "6.\u00a0Switch statement accepts.\n", "option1": "int", "option2": "char", "option3": "long", "option4": "All of the above", "ans": "Ans : D Explanation: switch statment accepts all int , char and long ."}, {"question": "7.\u00a0Which loop is guaranteed to execute at least one time.\n", "option1": "for", "option2": "while", "option3": "do while", "option4": "None of the above", "ans": "Ans : C Explanation: In do while first the statements in the body are executed then the condition is checked. If the condition is true then once again statements in the body of do while are executed."}, {"question": "8.\u00a0A labeled statement consist of an identifier followed by\n", "option1": ";", "option2": ":", "option3": ",", "option4": "=", "ans": "Ans : B Explanation: The label is an identifier. When goto statement is encountered, control of the program jumps to label: and starts executing the code."}, {"question": "9.\u00a0do-while loop terminates when conditional expression returns?\n", "option1": "One", "option2": "Zero", "option3": "Non - zero", "option4": "None of the above", "ans": "Ans : B Explanation: zero indicate False which terminate the loop ."}, {"question": "10.\u00a0c = (n) ? a : b; can be rewritten asexp1 ? exp2 : exp3;\n", "option1": "if(n){c = a;}else{c = b;}", "option2": "if(!n){c = a;}else{c = b;}", "option3": "if(n){c = b;}else{c = a;}", "option4": "None of the above", "ans": "Ans : A Explanation: None."},
{"question": "1.\u00a0What is the maximun number of dimensions an array in C may have?\n", "option1": "Two", "option2": "eight", "option3": "sixteen", "option4": "Theoratically no limit. The only practical limits are memory size and compilers", "ans": "Ans : D Explanation: The maximum size of an array is determined by the amount of memory that a program can access. On a 32-bit system, the maximum amount of memory that can be addressed by a pointer is 2^32 bytes which is 4 gigabytes. The actual limit may be less, depending on operating system implementation details."}, {"question": "2.\u00a0A one dimensional array A has indices 1....75. Each element is a string and takes up three memory words. The array is stored at location 1120 decimal. The starting address of A[49] is\n", "option1": "1264", "option2": "1164", "option3": "1167", "option4": "1267", "ans": "Ans : A Explanation: Start address of the element = base address of array + number of elements * size of each element = 1120 + 48 * 3 = 1264"}, {"question": "3.\u00a0What will be the address of the arr[2][3] if arr is a 2-D long array of 4 rows and 5 columns and starting address of the array is 2000?\n", "option1": "2048", "option2": "2056", "option3": "2052", "option4": "2042", "ans": "Ans : C Explanation: 2000 + 4*(5*2) + 3*4 ."}, {"question": "4.\u00a0Array can be considered as set of elements stored in consecutive memory locations but having __________.\n", "option1": "Same data type", "option2": "Different data type", "option3": "Same scope", "option4": "None of these", "ans": "Ans : A Explanation: Array store elements of same data type."}, {"question": "5.\u00a0Array is an example of _______ type memory allocation.\n", "option1": "Compile time", "option2": "Run time", "option3": "Both A and B", "option4": "None of the above", "ans": "Ans : A Explanation: Array allocate memory at compile time"}, {"question": "6.\u00a0Size of the array need not be specified, when\n", "option1": "Initialization is a part of definition", "option2": "It is a formal parameter", "option3": "It is a declaratrion", "option4": "All of the above", "ans": "Ans : A Explanation: int arr[] = {1,2,3}; In this case size of array need not to be specified when initialization  is a part of defination."}, {"question": "7.\u00a0The information about an array used in program will be stored in\n", "option1": "Symbol Table", "option2": "Activation Record", "option3": "Dope Vector", "option4": "Both A and B", "ans": "Ans : C Explanation: In computer programming, a dope vector is a data structure used to hold information about a data object, e.g. an array, especially its memory layout."}, {"question": "8.\u00a0The parameter passing mechanism for an array is\n", "option1": "call by value", "option2": "call by reference", "option3": "call by value-result", "option4": "None of the above", "ans": "Ans : B Explanation: The parameter passing mechanism for an array is call by reference.This technique uses in/out-mode semantics. Changes made to formal parameter do get transmitted back to the caller through parameter passing. Any changes to the formal parameter are reflected in the actual parameter in the calling environment as formal parameter receives a reference (or pointer) to the actual data."}, {"question": "9.\u00a0A string that is a formal parameter can be declared\n", "option1": "An array with empty braces", "option2": "A pointer to character", "option3": "Both A and B", "option4": "None of the above", "ans": "Ans : C Explanation: A string that is a formal parameter can be declared by both A and B."}, {"question": "10.\u00a0Which of the following function is more appropriate for reading in a multi-word string?\n", "option1": "scanf()", "option2": "printf()", "option3": "gets()", "option4": "puts()", "ans": "Ans : C Explanation: The C library function gets() reads a line from stdin and stores it into the string pointed to by str."},
{"question": "1.\u00a0The keyword used to transfer control from a function back to the calling function is\n", "option1": "switch", "option2": "goto", "option3": "return", "option4": "exit", "ans": "Ans : C Explanation: The keyword return is used to transfer control from a function back to the calling function."}, {"question": "2.\u00a0What is the default return type if it is not specified in function definition?\n", "option1": "void", "option2": "int", "option3": "float", "option4": "short int", "ans": "Ans : B Explanation: None"}, {"question": "3.\u00a0The default parameter passing mechanism is\n", "option1": "Call by value", "option2": "call by reference", "option3": "call by value result", "option4": "None", "ans": "Ans : A Explanation: None."}, {"question": "4.\u00a0Pick the correct statements. I. The body of a function should have only one return statement II. The body of a function may have many return statements. III. function can return only one value to the calling environment. IV. If return statement is omitted, then the function does its job but returns no value to the calling environment.\n", "option1": "I and II", "option2": "I and III", "option3": "II and III", "option4": "II anf IV", "ans": "Ans : C Explanation: None"}, {"question": "5.\u00a0Functions can return structure in c?\n", "option1": "TRUE", "option2": "FALSE", "option3": "May Be", "option4": "Can't Say", "ans": "Ans : A Explanation: Yes, functions can return structure"}, {"question": "6.\u00a0Forward declaration is absolutely necessary\n", "option1": "If a function returns a non-integer quantity", "option2": "If the function call precedes its definition", "option3": "If the function call precedes its definition and the function returns a non integer quantity", "option4": "None of the above", "ans": "Ans : C Explanation: If the function call precedes its definition and the function returns a non integer quantity"}, {"question": "7.\u00a0In C, what is the meaning of following function prototype with empty parameter list\n\r\nvoid fun()\r\n{\r\n   /* .... */\r\n}\r\n", "option1": "Function can only be called without any parameter", "option2": "Function can be called with any number of parameters of any types", "option3": "Function can be called with any number of integer parameters.", "option4": "Function can be called with one integer parameter.", "ans": "Ans : B Explanation: Empty list in C mean that the parameter list is not specified and function can be called with any parameters. In C, to declare a function that can only be called without any parameter, we should use \"void fun(void)\" As a side note, in C++, empty list means function can only be called without any parameter. In C++, both void fun() and void fun(void) are same."}, {"question": "8.\u00a0A pointer is\n", "option1": "A variable that stores address of an instruction", "option2": "A variable that stores address of other variable", "option3": "A keyword used to create variables", "option4": "None of these", "ans": "Ans : B Explanation: a pointer is a programming language object that stores the memory address of another value located in computer memory. A pointer references a location in memory, and obtaining the value stored at that location is known as dereferencing the pointer."}, {"question": "9.\u00a0The reason for using pointers in a Cprogram is\n", "option1": "Pointers allow different functions to share and modify their local variables.", "option2": "To pass large structures so that complete copy of the structure can be avoided.", "option3": "Pointers enable complex \u00e2\u20ac\u0153linked\" data structures like linked lists and binary trees.", "option4": "All of the above", "ans": "Ans : D Explanation: (A) With pointers, address of variables can be passed different functions can use this address to access the variables. (B) When large structure variables passed or returned, they are copied as everything is passed and returned by value in C. This can be costly with structure containing large data. To avoid this copying of large variables, we generally use poitner for large structures so that only address is copied. (C) With pointers, we can implement \"linked\" data structures. Java uses reference variables to implement these data structures. Note that C doesn't support reference variables."}, {"question": "10.\u00a0How can you write a[i][j][k][l] in equivalent pointer expression?\n", "option1": "(((***(a+i)+j)+k)+l)", "option2": "((**(*(a+i)+j)+k)+l)", "option3": "(*(*(*(a+i)+j)+k)+l)", "option4": "*(*(*(*(a+i)+j)+k)+l)", "ans": "Ans : D Explanation: *(*(*(*(a+i)+j)+k)+l)"},
{"question": "1.\u00a0Which of the following are themselves a collection of different data types?\n", "option1": "String", "option2": "Structures", "option3": "Char", "option4": "None of the above", "ans": "Ans : B Explanation: A structure is a user defined data type in C/C++. A structure creates a data type that can be used to group items of possibly different types into a single type."}, {"question": "2.\u00a0Which operator connects the structure name to its member name?\n", "option1": "-", "option2": "->", "option3": ".", "option4": "both . and ->", "ans": "Ans : C Explanation: None"}, {"question": "3.\u00a0Which of the following cannot be a structure member?\n", "option1": "Function", "option2": "Array", "option3": "Structure", "option4": "None of the above", "ans": "Ans : A Explanation: None."}, {"question": "4.\u00a0What is the correct syntax to declare a function foo() which receives an array of structure in function?\n", "option1": "void foo(struct *var);", "option2": "void foo(struct *var[]);", "option3": "void foo(struct var);", "option4": "none of the mentioned", "ans": "Ans : A Explanation: None"}, {"question": "5.\u00a0Union differs from structure in the following way\n", "option1": "All members are used at a time", "option2": "Only one member can be used at a time", "option3": "Union cannot have more members", "option4": "Union initialized all members as structure", "ans": "Ans : B Explanation: When a variable is associated with a structure, the compiler   allocates the memory for each member. The size of structure is greater than   or equal to the sum of  sizes of its   members. The smaller members may end with unused slack bytes. While in case of Union when a variable is associated with a union, the  compiler allocates the  memory by considering the size of the   largest memory. So, size of union is equal to the size of largest member."}, {"question": "6.\u00a0The size of the following union, where an int occupies 4 bytes of memory is\n\r\nunion demo\r\n{\r\n  float x;\r\n  int y;\r\n  char z[10];\r\n};", "option1": "8 byte", "option2": "4 byte", "option3": "10 byte", "option4": "18 byte", "ans": "Ans : C Explanation: Largest size among the three structure variable is selected that is char z[10]."}, {"question": "7.\u00a0Members of a union are accessed as________________.\n", "option1": "union-name.member", "option2": "union-pointer->member", "option3": "Both a & b", "option4": "None of the mentioned", "ans": "Ans : C Explanation: None"}, {"question": "8.\u00a0It is not possible to create an array of pointer to structures.\n", "option1": "TRUE", "option2": "FALSE", "option3": "May Be", "option4": "Can't Say", "ans": "Ans : B Explanation: Making sure of the length has nothing to do with whether you assign or copy. You cannot assign to an array in C, ever. The language doesn't allow it."}, {"question": "9.\u00a0Which of the following statement is True?\n", "option1": "User has to explicitly define the numeric value of enumerations", "option2": "User has a control over the size of enumeration variables.", "option3": "Enumeration can have an effect local to the block, if desired", "option4": "Enumerations have a global effect throughout the file.", "ans": "Ans : C Explanation: User has a control over the size of enumeration variable"}, {"question": "10.\u00a0size of union is size of the longest element in the union\n", "option1": "Yes", "option2": "No", "option3": "May Be", "option4": "Can't Say", "ans": "Ans : A Explanation: Max size of the union is the size of the largest data type or the memory taken by largest member."},
{"question": "1.\u00a0What is the return type of malloc() or calloc()?\n", "option1": "int *", "option2": "int **", "option3": "void *", "option4": "void **", "ans": "Ans : C Explanation: malloc() and calloc() return void *, without void * we may get warning in C if we don't type cast the return type to appropriate pointer."}, {"question": "2.\u00a0Which function is used to delete the allocated memory space?\n", "option1": "Dealloc()", "option2": "free()", "option3": "Both A and B", "option4": "None of the above", "ans": "Ans : B Explanation: free() is used to free the memory spaces allocated by malloc() and calloc()."}, {"question": "3.\u00a0Among 4 header files, which should be included to use the memory allocation functions like malloc(), calloc(), realloc() and free()?\n", "option1": "#include<string.h>", "option2": "#include<stdlib.h>", "option3": "#include<memory.h>", "option4": "Both b and c", "ans": "Ans : B Explanation: #include  <stdlib.h> is a header filer, which contains the inbuilt functions for all memory allocation functions."}, {"question": "4.\u00a0Which of the following is/are true\n", "option1": "calloc() allocates the memory and also initializes the allocates memory to zero, while memory allocated using malloc() has random data.", "option2": "malloc() and memset() can be used to get the same effect as calloc()", "option3": "Both malloc() and calloc() return 'void *' pointer", "option4": "All of the above", "ans": "Ans : D Explanation: None"}, {"question": "5.\u00a0Which of the following is true?\n", "option1": "\"ptr = calloc(m, n)\" is equivalent to following", "option2": "r = malloc(m * n);", "option3": "\"ptr = calloc(m, n)\" is equivalent to following", "option4": "r = malloc(m * n); memset(ptr, 0, m * n);", "ans": "Ans : B Explanation: The name malloc and calloc() are library functions that allocate memory dynamically. It means that memory is allocated during runtime(execution of the program) from heap segment."}, {"question": "6.\u00a0Which languages necessarily need heap allocation in the run time environment?\n", "option1": "Those that support recursion", "option2": "Those that use dynamic scoping", "option3": "Those that use global variables", "option4": "Those that allow dynamic data structures", "ans": "Ans : D Explanation: Heap allocation is needed for dynamic data structures like tree, linked list, etc."}, {"question": "7.\u00a0Which of the following statement is correct prototype of the malloc() function in c ?\n", "option1": "int* malloc(int);", "option2": "Char* malloc(char);", "option3": "unsigned int* malloc(unsigned int);", "option4": "void* malloc(size_t);", "ans": "Ans : D Explanation: By defalut for malloc() function return type is void."}, {"question": "8.\u00a0Specify the 2 library functions to dynamically allocate memory?\n", "option1": "malloc() and memalloc()", "option2": "alloc() and memalloc()", "option3": "malloc() and calloc()", "option4": "memalloc() and faralloc()", "ans": "Ans : C Explanation: 2 library functions to dynamically allocate memory is malloc() and calloc()."}, {"question": "9.\u00a0malloc() returns a float pointer if memory is allocated for storing float's and a double pointer if memory is allocated for storing double's.\r\n\r\nA.\n", "option1": "TRUE", "option2": "FALSE", "option3": "May Be", "option4": "Can't Say", "ans": "Ans : B Explanation: malloc() and calloc() return void pointer for using a particular data type we made explicite type casting."}, {"question": "10.\u00a0malloc() allocates memory from the heap and not from the stack.\n", "option1": "TRUE", "option2": "FALSE", "option3": "May Be", "option4": "Can't Say", "ans": "Ans : A Explanation: Heap area consist of hash codes .i.e. addreses while stack may or may not be that's why malloc() allocates memory from the heap."},
{"question": "1.\u00a0Which of the following true about FILE *fp\n", "option1": "FILE is a keyword in C for representing files and fp is a variable of FILE type.", "option2": "FILE is a stream", "option3": "FILE is a buffered stream", "option4": "FILE is a structure and fp is a pointer to the structure of FILE type", "ans": "Ans : D Explanation: fp is a pointer of FILE type and FILE is a structure that store following information about opened file."}, {"question": "2.\u00a0Which of the following mode argument is used to truncate?\n", "option1": "a", "option2": "w", "option3": "f", "option4": "t", "ans": "Ans : B Explanation: None"}, {"question": "3.\u00a0The first and second arguments of fopen() are\n", "option1": "A character string containing the name of the file & the second argument is the mode", "option2": "A character string containing the name of the user & the second argument is the mode", "option3": "A character string containing file pointer & the second argument is the mode", "option4": "None of the mentioned", "ans": "Ans : A Explanation: None."}, {"question": "4.\u00a0FILE is of type ______\n", "option1": "int type", "option2": "char * type", "option3": "struct type", "option4": "None of the mentioned", "ans": "Ans : C Explanation: It is what is typically termed an opaque data type, meaning it's typically declared as a simple structure, and then internally in the OS libraries the FILE pointer is cast to the actual date-type of the data-structure that the OS will use access data from a file. A lot of these details are system-specific though, so depending on the OS, the definition may differ."}, {"question": "5.\u00a0fseek() should be preferred over rewind() mainly because\n", "option1": "rewind() doesn't work for empty files", "option2": "rewind() may fail for large files", "option3": "In rewind, there is no way to check if the operations completed successfully", "option4": "All of the above", "ans": "Ans : C Explanation: The rewind function sets the file position indicator for the stream pointed to by stream to the beginning of the file."}, {"question": "6.\u00a0FILE reserved word is?\n", "option1": "A structure tag declared in stdio.h", "option2": "One of the basic datatypes in c", "option3": "Pointer to the structure defined in stdio.h", "option4": "It is a type name defined in stdio.h", "ans": "Ans : D Explanation: It is a type name defined in stdio.h"}, {"question": "7.\u00a0For binary files, a ___ must be appended to the mode string.\n", "option1": "\"b\"", "option2": "\"B\"", "option3": "\"binary\"", "option4": "\"01\"", "ans": "Ans : A Explanation: None"}, {"question": "8.\u00a0Which of the following statements about stdout and stderr are true?\n", "option1": "Same", "option2": "Both connected to screen always.", "option3": "Both connected to screen by default.", "option4": "stdout is line buffered but stderr is unbuffered.", "ans": "Ans : C Explanation: None"}, {"question": "9.\u00a0Which type of files can\u00e2\u20ac\u2122t be opened using fopen()?\n", "option1": ".txt", "option2": ".bin", "option3": ".c", "option4": "None of the above", "ans": "Ans : D Explanation: None"}, {"question": "10.\u00a0When a C program is started, O.S environment is responsible for opening file and providing pointer for that file?\n", "option1": "Standard input", "option2": "Standard output", "option3": "Standard error", "option4": "All of the above", "ans": "Ans : D Explanation: None"},
{"question": "1.\u00a0What is the output of this program?\n        \r\n#include <stdio.h>\r\n#define int char\r\nmain()\r\n{\r\n  int i=50;\r\n  printf (\"sizeof (i) =%d\", sizeof (i));\r\n}", "option1": "2", "option2": "4", "option3": "8", "option4": "1", "ans": "Ans : D Explanation: Since the #define replaces the string int by the macro char"}, {"question": "2.\u00a0What is the output of this program?\n\r\n#include <stdio.h> \r\n#define x 3\r\nint main()\r\n{\r\n  int i;\r\n  i = x*x*x;\r\n  printf(\"%d\",i);\r\n  return 0;\r\n}", "option1": "27", "option2": "x is not declared", "option3": "No output", "option4": "Garbage value", "ans": "Ans : A Explanation: Since we replace x = 27 in #define."}, {"question": "3.\u00a0What is the output of this program?\n\r\n#include <stdio.h> \r\n#include  <stdlib.h>\r\n#define square(x) x*x\r\nint main()\r\n{\r\n  int i;\r\n  i = 27/square(3);\r\n  printf(\"%d\",i);\r\n  return 0;\r\n}", "option1": "9", "option2": "Compilation error", "option3": "3", "option4": "27", "ans": "Ans : D Explanation: Operators enjoys priority / is given more priority over *. In this program the execution takes place in this format.\r\n\r\n27 / square(3)\r\n\r\n27 / 3*3\r\n\r\n27 / 3*3\r\n\r\n9 * 3\r\n\r\n27"}, {"question": "4.\u00a0What is the output of this program?\n\r\n#include <stdio.h>\r\n#define i 5\r\nint main()\r\n{\r\n  #define i 10\r\n  printf(\"%d\",i);\r\n  return 0;\r\n}", "option1": "Compilation error", "option2": "10", "option3": "5", "option4": "Runtime error", "ans": "Ans : B Explanation: The preprocessor directives can be redefined anywhere in the program. So the most recently assigned value (#define i 10) will be taken."}, {"question": "5.\u00a0What is the output of this program?\n\r\n#include <stdio.h>\r\n#define clrscr() 17\r\nint main()\r\n{\r\n  clrscr();\r\n  printf(\"%d\",clrscr());\r\n  return 0;\r\n}", "option1": "Compilation error", "option2": "Runtime error", "option3": "17", "option4": "none of the above", "ans": "Ans : C Explanation: Preprocessor in any programming language executes as a seperate pass before the execution of the compiler. So textual replacement of clrscr() to 17 occurs with no errors."}, {"question": "6.\u00a0What is the output of this program?\n\t\t   \r\n#include <stdio.h>\r\nint main()\r\n{\r\n  printf(\"%d\",30);\r\n  return 0;\r\n}", "option1": "Runtime Error", "option2": "Garbage value", "option3": "Compilation error", "option4": "30", "ans": "Ans : C Explanation: Expected unqualified-id before numeric constant error will occur. Though 30; is an executable statement inside main() function, it won't outside the main() function."}, {"question": "7.\u00a0What is the output of this program?\n\r\n#include <stdio.h>\r\n#define p 17;\r\nint main()\r\n{\r\n  printf(\"%d\",p);\r\n  return 0;\r\n}", "option1": "Garbage value", "option2": "Runtime error", "option3": "17", "option4": "Compilation error", "ans": "Ans : D Explanation: Preprocessor should not terminate with semicolon."}, {"question": "8.\u00a0Which statment is true about the given code ?\n\r\n#include <stdio.h>\r\nenum colors {lets,find,course};\r\nint main()\r\n{\r\n  printf(\"%d %d %d\",course,lets,find);\r\n  return 0;\r\n}", "option1": "3 1 2", "option2": "0  1  2", "option3": "2 0 1", "option4": "1  0  2", "ans": "Ans : C Explanation: enum assigns numbers starting from 0, if not explicitly defined by some other integer."}, {"question": "9.\u00a0What is the Error of this program?\n\r\n#include <stdio.h>\r\n#define CONDITION(x) \r\nprintf(\"letsfindcourse\");                         \r\nint main()\r\n{\r\n  CONDITION(0);\r\n  return 0;\r\n}", "option1": "letsfindcourse", "option2": "Compilation error", "option3": "Runtime error", "option4": "None of the above", "ans": "Ans : B Explanation: #define CONDITION(x) must be terminated my backslash () to follow the next line."}, {"question": "10.\u00a0How will you free the memory allocated by the following program?\n\r\n#include <stdio.h>\r\n#define CONDITION(x)\r\nprintf(\"letsfindcourse\");                         \r\nint main()\r\n{\r\n  CONDITION(0);\r\n  return 0;\r\n}", "option1": "Runtime Error", "option2": "letsfindcourse", "option3": "Compilation error", "option4": "None of the above", "ans": "Ans : B Explanation: #define CONDITION(x) ends with backslash(/). So that next line following #define CONDITION(x) will be consider by the C compiler and prints letsfindcourse."},
{"question": "1.\u00a0which of the following is not a storage class specifier?\n", "option1": "auto", "option2": "register", "option3": "extern", "option4": "volatile", "ans": "Ans : A Explanation: volatile is not a storage class specifier. volatile and const are type qualifiers."}, {"question": "2.\u00a0what is the inital value of register storage class specifier?\n", "option1": "0", "option2": "Null", "option3": "Garbage", "option4": "Infinite", "ans": "Ans : C Explanation: Garbage is the inital value of register storage class specifier."}, {"question": "3.\u00a0What is the scope of extern class specifier?\n", "option1": "Within block", "option2": "Within Program", "option3": "Global Multiple files", "option4": "None of the above", "ans": "Ans : C Explanation: Global Multiple files is the scope of extern class specifier."}, {"question": "4.\u00a0What is the scope of static class specifier?\n", "option1": "Within block", "option2": "Within Program", "option3": "Global Multiple files", "option4": "None of the above", "ans": "Ans : A Explanation: Within block is the scope of static class specifier."}, {"question": "5.\u00a0what is the inital value of extern storage class specifier?\n", "option1": "0", "option2": "Null", "option3": "Garbage", "option4": "Infinite", "ans": "Ans : A Explanation: Garbage is the inital value of extern storage class specifier."}, {"question": "6.\u00a0What will be output for the folowing code?\n", "option1": "2 1", "option2": "0 0", "option3": "3 2", "option4": "Compilation error", "ans": "Ans : B Explanation: A static variable is shared among all calls of a function.All calls to main() in the given program share the same x.x becomes 0 before the printf() statement in all calls to main().."}, {"question": "7.\u00a0What will be output for the folowing code?\n", "option1": "5", "option2": "6", "option3": "4", "option4": "Compilation error", "ans": "Ans : C Explanation: we have a constant pointer and we are not changing ptr to point to any other location. We are only decrementing value pointed by ptr."}, {"question": "8.\u00a0Which of the following statement are correct?\r\n\r\n(I) The maximum value a variable can hold depends upon its storage class.\r\n(II) By default all variables enjoy a static storage class.\n", "option1": "Only I is correct", "option2": "Only II is correct", "option3": "Both I & II are correct", "option4": "Both I & II are incorrect", "ans": "Ans : D Explanation: The maximum value a variable can hold depends upon its storage class and By default all variables enjoy a static storage class both statement are incorrect."}, {"question": "9.\u00a0An identifier's storage class determines\n", "option1": "The time during which the identifier exists in memory", "option2": "Which function is to use", "option3": "Where to store the program", "option4": "None of them", "ans": "Ans : A Explanation: An identifier's storage class determines The time during which the identifier exists in memory."}, {"question": "10.\u00a0how many storage classes in c?\n", "option1": "2", "option2": "3", "option3": "4", "option4": "5", "ans": "Ans : C Explanation: There are four storage classes in C those are automatic, register, static, and external."},
{"question": "1.\u00a0Enumeration (or enum) is a ______ data type in C?\n", "option1": "user defined", "option2": "built-in", "option3": "libary", "option4": "None Of the above", "ans": "Ans : A Explanation: Enumeration (or enum) is a user defined data type in C. It is mainly used to assign names to integral constants, the names make a program easy to read and maintain."}, {"question": "2.\u00a0If we do not explicitly assign values to enum names, the compiler by default assigns values to ?\n", "option1": "null", "option2": "-1", "option3": "0", "option4": "Garbage", "ans": "Ans : C Explanation: If we do not explicitly assign values to enum names, the compiler by default assigns values to 0."}, {"question": "3.\u00a0All enum constants are?\n", "option1": "Same in their scope", "option2": "unique in their scope", "option3": "contain dupicate value in their scope", "option4": "None of the above", "ans": "Ans : B Explanation: All enum constants must be unique in their scope."}, {"question": "4.\u00a0String handling functions such as strcmp(), strcpy() etc can be used with enumerated types.\n", "option1": "TRUE", "option2": "FALSE", "option3": "May Be", "option4": "Can't Say", "ans": "Ans : B Explanation: Enumerated types are not strings. Hence it is not possible to use string handling functions with enumerated data types."}, {"question": "5.\u00a0Pick the incorrect statement with respect to enums.\n", "option1": "Two enum symbols cannot have the same value", "option2": "Only integer constants are allowed in enums", "option3": "It is not possible to change the value of enum symbols", "option4": "Enum variables are automatically assigned values if no value is specified", "ans": "Ans : A Explanation: The statement that two enum symbols cannot have the same value is incorrect. Any number of enum symbols can have the same value."}, {"question": "6.\u00a0Arithmetic operations are not allowed on enumerated constants.\n", "option1": "TRUE", "option2": "FALSE", "option3": "May Be", "option4": "Can't Say", "ans": "Ans : B Explanation: Arithmetic operations such as addition, subtraction, multiplication and division are allowed on enumerated constants."}, {"question": "7.\u00a0What will be output for the following code?\n", "option1": "error", "option2": "success", "option3": "failure", "option4": "0", "ans": "Ans : D Explanation: The code shown above results 0, because in this there is not error in the declaration of these variables in the statement: enum test1 t1,t2;"}, {"question": "8.\u00a0What will be output for the following code?\n", "option1": "error", "option2": "success", "option3": "failure", "option4": "0", "ans": "Ans : A Explanation: The code shown above results in an error, stating : storage size of t1 and t2 unknown. There is an error in the declaration of these variables in the statement: enum test1 t1,t2;"}, {"question": "9.\u00a0What will be output for the following code?\n", "option1": "Error", "option2": "5", "option3": "6", "option4": "2", "ans": "Ans : A Explanation: The above code results in an error because it is not possible to modify the value of enum constants. In the above code, we have tried to increment the value of a. This results in an error."}, {"question": "10.\u00a0What is the correct syntax of enum?\n", "option1": "enum flag{constant1, constant2, constant3, ....... };", "option2": "enum flag(constant1, constant2, constant3, ....... );", "option3": "enum flag[constant1, constant2, constant3, ....... ];", "option4": "enumflag{constant1, constant2, constant3, ....... };", "ans": "Ans : A Explanation: The correct syntax of enum is enum flag{constant1, constant2, constant3, ....... };"},
{"question": "1.\u00a0How many type of conversion are there in c?\n", "option1": "1", "option2": "2", "option3": "3", "option4": "4", "ans": "Ans : B Explanation: Basically 2 types of convsersion : Implicit Type Conversion and Explicit Type Conversion."}, {"question": "2.\u00a0Which conversion also called Automatic Type Conversion?\n", "option1": "Implicit Type Conversion", "option2": "Explicit Type Conversion", "option3": "Both A and B", "option4": "None of the above", "ans": "Ans : A Explanation: This type of conversion is usually performed by the compiler when necessary without any commands by the user. Thus it is also called \"Automatic Type Conversion\"."}, {"question": "3.\u00a0The following code is an example of?\ndouble da = 4.5;\r\ndouble db = 4.6;\r\ndouble dc = 4.9;\r\n\r\n//explicitly defined by user\r\nint result = (int)da + (int)db + (int)dc; \r\n\r\nprintf(\"\"result = %d\"\", result);", "option1": "Implicit Type Conversion", "option2": "Explicit Type Conversion", "option3": "Error", "option4": "Can not Say", "ans": "Ans : B Explanation: In the above code we find that the output result is 12 because in the result expression the user has explicitly defined the operands (variables) as integer data type. Hence, there is no implicit conversion of data type by the compiler."}, {"question": "4.\u00a0What will be output for the following code?\n#include<stdio.h> \r\nint main() \r\n{ \r\n    int x = 10;    \r\n    char y = 'a'; \r\n    x = x + y; \r\n     \r\n    float z = x + 1.0; \r\n  \r\n    printf(\"\"x = %d, z = %f\"\", x, z); \r\n    return 0; \r\n} ", "option1": "x = 107, z = 108.00", "option2": "x = 107, z = 108.0000", "option3": "x = 107, z = 108.000000", "option4": "x = 108, z = 108.000000", "ans": "Ans : C Explanation: Output for the following code  : x = 107, z = 108.000000"}, {"question": "5.\u00a0What will be output for the following code?\n#include<stdio.h> \r\nint main() \r\n{ \r\n    double x = 1.2; \r\n    int sum = (int)x + 1; \r\n  \r\n    printf(\"\"sum = %d\"\", sum); \r\n  \r\n    return 0; \r\n} ", "option1": "sum = 2", "option2": "sum = 1", "option3": "sum = 0", "option4": "sum = 3", "ans": "Ans : A Explanation: Output for the following code  : sum = 2"}, {"question": "6.\u00a0In Implicit type conversion, If an operand of long int is present then the other operand will be converted to ?\n", "option1": "unsigned int", "option2": "unsigned long int", "option3": "float", "option4": "long int", "ans": "Ans : D Explanation: If an operand of long int is present then the other operand will be converted to long int and the final result will also be long int."}, {"question": "7.\u00a0In Implicit type conversion, If an operand of type long double is present in the expression, then the corresponding operand will also be converted to?\n", "option1": "double", "option2": "long double", "option3": "int", "option4": "float", "ans": "Ans : B Explanation: If an operand of type long double is present in the expression, then the corresponding operand will also be converted to long double same for the double data type."}, {"question": "8.\u00a0Which type of conversion is NOT accepted?\n", "option1": "From char to int", "option2": "From float to char pointer", "option3": "From negative int to char", "option4": "From double to char", "ans": "Ans : B Explanation: Conversion of a float to pointer type is not allowed."}, {"question": "9.\u00a0Which of the following typecasting is accepted by C?\n", "option1": "Widening conversions", "option2": "Narrowing conversions", "option3": "Widening & Narrowing conversions", "option4": "None of the above", "ans": "Ans : C Explanation: Widening & Narrowing conversions following typecasting is accepted by C."}, {"question": "10.\u00a0When do you need to use type-conversions?\n", "option1": "The value to be stored is beyond the max limit", "option2": "The value to be stored is in a form not supported by that data type", "option3": "To reduce the memory in use, relevant to the value", "option4": "All of the above", "ans": "Ans : D Explanation: For All of the above statement we need to use type-conversions."},
{"question": "1.\u00a0The process in which a function calls itself directly or indirectly is called?\n", "option1": "Recursion", "option2": "Type Conversions", "option3": "Constant", "option4": "Abstract Classes", "ans": "Ans : A Explanation: The process in which a function calls itself directly or indirectly is called recursion\u00a0"}, {"question": "2.\u00a0A function fun is called __________ if it calls the same function fun.\n", "option1": "indirect recursive", "option2": "direct recursive", "option3": "Both A and B", "option4": "None of the above", "ans": "Ans : B Explanation: A function fun is called direct recursive if it calls the same function fun."}, {"question": "3.\u00a0Which of the following is not an example of recursion?\n", "option1": "Towers of Hanoi (TOH)", "option2": "DFS", "option3": "Inorder Tree Traversals", "option4": "SFS", "ans": "Ans : D Explanation: SFS is not an example of recursion."}, {"question": "4.\u00a0When any function is called from main(), the memory is allocated to it on the stack.\n", "option1": "TRUE", "option2": "FALSE", "option3": "Can be true or false", "option4": "Can not Say", "ans": "Ans : A Explanation: The above statement is true statement."}, {"question": "5.\u00a0Iteration requires more system memory than recursion.\n", "option1": "TRUE", "option2": "FALSE", "option3": "Can be true or false", "option4": "Can not Say", "ans": "Ans : B Explanation: Recursion requires more system memory than iteration due to the maintenance of stack."}, {"question": "6.\u00a0When a recursive function is called in the absence of an exit condition, it results in an infinite loop due to which the stack keeps getting filled(stack overflow). This results in a run time error.\n", "option1": "TRUE", "option2": "FALSE", "option3": "Can be true or false", "option4": "Can not Say", "ans": "Ans : A Explanation: When a recursive function is called in the absence of an exit condition, it results in an infinite loop due to which the stack keeps getting filled(stack overflow). This results in a run time error."}, {"question": "7.\u00a0The data structure used to implement recursive function calls _____________\n", "option1": "Array", "option2": "Linked List", "option3": "Binary tree", "option4": "Stack", "ans": "Ans : D Explanation: The compiler uses the data type stack for implementing normal as well as recursive function calls."}, {"question": "8.\u00a0What will be output for the following code?\n#include <stdio.h>\r\nmain()\r\n{\r\n    int num=5;\r\n    int fun(int num);\r\n    printf(\"\"%d\"\",fun(num));\r\n}\r\nint fun(int num)\r\n{\r\n    if(num>0)\r\n        return(num+fun(num-2));\r\n}", "option1": "6", "option2": "7", "option3": "8", "option4": "9", "ans": "Ans : C Explanation: The output for the following code : 8"}, {"question": "9.\u00a0What will be output for the following code?\nint main()\r\n{\r\n    printf(\"\"Hello\"\");\r\n    main();\r\n    return 0;\r\n}", "option1": "Hello is printed once", "option2": "Hello infinite number of times", "option3": "Hello is not printed at all", "option4": "0 is returned", "ans": "Ans : B Explanation: in the above code, we are calling main() from main(), which is recursion. However, we have not defined any condition for the program to exit. Hence, \u201chello\u201d will be printed infinite number of times. To prevent this, we need to define a proper exit condition in the recursive function."}, {"question": "10.\u00a0Which of the following is true about recursion?\n", "option1": "Recursion provides a clean and simple way to write code.", "option2": "The recursive program has less space requirements than iterative program", "option3": "The principle of stack is FIFO", "option4": "All of the above", "ans": "Ans : A Explanation: Recursion provides a clean and simple way to write code  is true about recursion."},
{"question": "1.\u00a0In expression i = g() + f(), first function called depends on __________\n", "option1": "Compiler", "option2": "Associativiy of () operator", "option3": "Precedence of () and + operator", "option4": "Left to write of the expression", "ans": "Ans : A Explanation: In expression i = g() + f(), first function called depends on compiler."}, {"question": "2.\u00a0Which of the following is correct Associativity for == operator?\n", "option1": "Left to right", "option2": "Right to left", "option3": "Left to left", "option4": "Right to right", "ans": "Ans : A Explanation: Associativity of == is Left to right."}, {"question": "3.\u00a0Which of the following operator has highest Precedence?\n", "option1": "*", "option2": "/", "option3": "~", "option4": "[]", "ans": "Ans : D Explanation: [] operator has highest Precedence."}, {"question": "4.\u00a0Which of the following operator has lowest Precedence?\n", "option1": "||", "option2": ",", "option3": "?:", "option4": "=", "ans": "Ans : B Explanation: Comma(,) operator has lowest Precedence."}, {"question": "5.\u00a0Which of the following is a ternary operator?\n", "option1": "||", "option2": "&&", "option3": "?:", "option4": ">>", "ans": "Ans : C Explanation: ?: is a ternary operator"}, {"question": "6.\u00a0What will be output for the following code?\n#include <stdio.h>\r\nint main()\r\n{\r\n    int a = 1, b = 2;\r\n    int c = a ^ b & 1;\r\n    printf(\"\"%d\n\"\", c);\r\n}", "option1": "0", "option2": "1", "option3": "2", "option4": "3", "ans": "Ans : B Explanation: The output for the following code is : 1"}, {"question": "7.\u00a0What will be output for the following code?\n#include <stdio.h>\r\nint main()\r\n{\r\n    double a = 5 % 3 & 4 + 5 * 6;\r\n    printf(\"\"%lf\"\", a);\r\n\r\n}", "option1": "2", "option2": "30", "option3": "(2.000000", "option4": "Run-time error", "ans": "Ans : C Explanation: The output for the following code is :  2.000000"}, {"question": "8.\u00a0What will be output for the following code?\n#include <stdio.h>\r\nint main()\r\n{\r\n        int a = 2;\r\n        int b = (a++, a++);\r\n        printf(\"\"%d%d\n\"\", b, a);\r\n}", "option1": "3 4", "option2": "4 4", "option3": "3 5", "option4": "2 4", "ans": "Ans : A Explanation: The output for the following code : 3 4"}, {"question": "9.\u00a0Which of the following has same Precedence?  A. ++  B. ->  C. !\n", "option1": "A and B", "option2": "B and C", "option3": "A and C", "option4": "All has same Precedence", "ans": "Ans : A Explanation: A and B has same Precedence."}, {"question": "10.\u00a0Which of the following option is the correct representation of the following C statement?\ne = a * b + c / d * f;", "option1": "e = (a * (b +(c /(d * f))));", "option2": "e = ((a * b) + (c / (d * f)));", "option3": "e = ((a * b) + ((c / d)* f));", "option4": "Both C and B", "ans": "Ans : D Explanation: Verified by e = 1 * 2 + 3 / 4 * 5; and then using respective braces according to the option."},
{"question": "1.\u00a0The command line arguments are handled using?\n", "option1": "void()", "option2": "main()", "option3": "header files", "option4": "macros", "ans": "Ans : B Explanation: The command line arguments are handled using main() function arguments."}, {"question": "2.\u00a0argc refers to the?\n", "option1": "number of arguments passed", "option2": "a pointer array", "option3": "Both A and B", "option4": "None of the above", "ans": "Ans : A Explanation: The command line arguments are handled using main() function arguments where\u00a0argc\u00a0refers to the number of arguments passed"}, {"question": "3.\u00a0argv[] is a?\n", "option1": "a pointer array", "option2": "It points to each argument passed to the program.", "option3": "Both A and B", "option4": "None of the above", "ans": "Ans : C Explanation: argv[]\u00a0is a pointer array which points to each argument passed to the program."}, {"question": "4.\u00a0In linux, argv[0] by command-line argument can be occupied by _________\n", "option1": "./a.out", "option2": "./test", "option3": "./fun.out.out", "option4": "All of the above", "ans": "Ans : D Explanation: All the options mentioned (./a.out, ./test, ./fun.out.out) are simply the command without any argument. A command is always stored as argument vector zero i.e., argv[0] always contain the command where as argv[1], argv[2], etc. contains the arguments to the commands, if any."}, {"question": "5.\u00a0What type of array is generally generated in Command-line argument?\n", "option1": "Single dimension array", "option2": "2-Dimensional Square Array", "option3": "Jagged Array", "option4": "2-Dimensional Rectangular Array", "ans": "Ans : C Explanation: Jagged Array is generally generated in Command-line argument."}, {"question": "6.\u00a0What is the index of the last argument in command line arguments?\n", "option1": "argc \u2013 2", "option2": "argc \u2013 1", "option3": "argc", "option4": "argc + 1", "ans": "Ans : B Explanation: argc \u2013 1 is the index of the last argument in command line arguments."}, {"question": "7.\u00a0What will be output for the following code?\n#include <stdio.h>\r\nint main(int argc, char *argv[])\r\n{\r\n    printf(\"\"%d\n\"\", argc);\r\n    return 0;\r\n}", "option1": "0", "option2": "1", "option3": "error", "option4": "Depends on the compiler", "ans": "Ans : B Explanation: The output for the following code : 1"}, {"question": "8.\u00a0What will be output for the following code?\n#include <stdio.h>\r\nint main(int argc, char *argv[])\r\n{\r\n    printf(\"\"%s\n\"\", argv[argc]);\r\n    return 0;\r\n}", "option1": "Segmentation fault/code crash", "option2": "Executable file name", "option3": "Depends on the platform", "option4": "Depends on the compiler", "ans": "Ans : A Explanation: The output for the followinng code : Segmentation fault/code crash"}, {"question": "9.\u00a0What will be output for the following code?\n#include <stdio.h>\r\nint main(int argc, char *argv[])\r\n{\r\n    printf(\"\"%s\n\"\", argv[-1]);\r\n    return 0;\r\n}", "option1": "./a.out", "option2": "Segmentation fault/code crash", "option3": "-1", "option4": "Depends on the compiler", "ans": "Ans : B Explanation: The output for the followinng code : Segmentation fault/code crash"}, {"question": "10.\u00a0What will be output for the following code?\n#include <stdio.h>\r\nint main(int argc, char *argv[])\r\n{\r\n    while (*argv  !=  NULL)\r\n        printf(\"\"%s\n\"\", *(argv++));\r\n    return 0;\r\n}", "option1": "./a.out", "option2": "Segmentation fault/code crash", "option3": "Depends on the platform", "option4": "Depends on the compiler", "ans": "Ans : A Explanation: The output for the followinng code : ./a.out"},
{"question": "1.\u00a0____________ in C are used to interact with system time routine and formatted time outputs are displayed\n", "option1": "Ceil function", "option2": "Time functions", "option3": "Measure function", "option4": "Hour function", "ans": "Ans : B Explanation: Time functions in C are used to interact with system time routine and formatted time outputs are displayed"}, {"question": "2.\u00a0Which function used to modify the system date?\n", "option1": "getdate", "option2": "clock", "option3": "setdate", "option4": "mktime", "ans": "Ans : C Explanation: setdate() : This function used to modify the system date"}, {"question": "3.\u00a0What is true about strftime function?\n", "option1": "This function is used to get current system time as structure", "option2": "This function is used to get the difference between two given times", "option3": "This function interprets tm structure as calendar time", "option4": "This function is used to modify the actual time format", "ans": "Ans : D Explanation: strftime(): This function is used to modify the actual time format"}, {"question": "4.\u00a0The time() function is defined in __________ header file. \n", "option1": "ctime.h", "option2": "time.h", "option3": "clock.h", "option4": "date.h", "ans": "Ans : B Explanation: The time() function is defined in time.h (ctime in C++) header file. "}, {"question": "5.\u00a0Which of the following library functions returns the time in UTC (Greenwich mean time) format?\n", "option1": "localtime()", "option2": "gettime()", "option3": "gmtime()", "option4": "settime()", "ans": "Ans : C Explanation: The library function gmtime() returns the time in UTC format. To find the current time, we use the function localtime()."}, {"question": "6.\u00a0asctime() structure contents are interpreted by this function as calendar time.\n", "option1": "Yes", "option2": "No", "option3": "Can be yes or no", "option4": "Can not say", "ans": "Ans : A Explanation: Yes, asctime() structure contents are interpreted by this function as calendar time. This time is converted into string."}, {"question": "7.\u00a0Which of the following format specifiers is used to represent the name of the time zone?\n", "option1": "%A", "option2": "%B", "option3": "%H", "option4": "%Z", "ans": "Ans : D Explanation: The format specifier %Z is used to specify the name of the time zone. %A- full weekday, %B- full month name, %H-hours(0-23)."}, {"question": "8.\u00a0The purpose of the function ctime() is that ___________\n", "option1": "it returns a string representing the local time", "option2": "it returns a void string", "option3": "it returns a string representing the time in UTC format", "option4": "it returns a string representing the time stored in a structure", "ans": "Ans : A Explanation: The library function ctime() returns a string representation of the local time. The function asctime() returns a string representing the time stored in a structure."}, {"question": "9.\u00a0Which of the following format specifiers is used to specify whether the given time is in AM or PM?\n", "option1": "%q", "option2": "%p", "option3": "%Q", "option4": "%P", "ans": "Ans : B Explanation: %p (small letter) is used to specify whether the given time is in AM or PM. %I is used to represent the number of hours in the 12 hour clock format. %X is used to represent the standard time zone."}, {"question": "10.\u00a0mktime() function interprets tm structure as calendar time.\n", "option1": "TRUE", "option2": "FALSE", "option3": "Can be true or false", "option4": "Can not say", "ans": "Ans : A Explanation: True, mktime() function interprets tm structure as calendar time."},
{"question": "1.\u00a0C Programming allows us to perform mathematical operations through the functions defined in ______________ header file. \n", "option1": "iostream.h", "option2": "string.h", "option3": "math.h", "option4": "conio.h", "ans": "Ans : C Explanation: C Programming allows us to perform mathematical operations through the functions defined in math.h header file. "}, {"question": "2.\u00a0Which of the following is correct mathematical operations in C Programming?\n", "option1": "sqrt", "option2": "pow", "option3": "ceil", "option4": "All of the above", "ans": "Ans : D Explanation: The math.h header file contains various methods for performing mathematical operations such as sqrt(), pow(), ceil(), floor() etc."}, {"question": "3.\u00a0Which of the following returns the square root of given number?\n", "option1": "ceil", "option2": "sqrt", "option3": "floor", "option4": "abs", "ans": "Ans : B Explanation: sqrt(number): returns the square root of given number."}, {"question": "4.\u00a0abs(number) returns the absolute value of given number.\n", "option1": "TRUE", "option2": "FALSE", "option3": "Can be true or false", "option4": "Can not say", "ans": "Ans : A Explanation: True, abs(number) returns the absolute value of given number."}, {"question": "5.\u00a0Which of the following is true about pow?\n", "option1": "rounds down the given number", "option2": "rounds up the given number", "option3": "returns the power of given number", "option4": "returns the absolute value of given number", "ans": "Ans : C Explanation: pow(base, exponent) returns the power of given number."}, {"question": "6.\u00a0The cos function computes the cosine of x.\n", "option1": "measured in degrees", "option2": "measured in radians", "option3": "measured in gradian", "option4": "measured in milliradian", "ans": "Ans : B Explanation: The cos function computes the cosine of x (measured in radians)."}, {"question": "7.\u00a0A function is declared as sqrt(-x) under the header file math.h, what will the function return?\n", "option1": "square root of x", "option2": "complex number", "option3": "domain error", "option4": "range error", "ans": "Ans : C Explanation: The sqrt function computes the nonnegative square root of x. A domain error occurs if the argument is negative."}, {"question": "8.\u00a0HUGE_VAL macro is used when the output of the function may not be ___________\n", "option1": "integer number", "option2": "short int", "option3": "long int", "option4": "floating point numbers", "ans": "Ans : D Explanation: HUGE_VAL macro is used when the result of a function may not be representable as a floating point number."}, {"question": "9.\u00a0The C library function double fmod(double x, double y) returns the remainder of x divided by y. \n", "option1": "log10(double x, double y)", "option2": "fabs(double x, double y)", "option3": "fmod(double x, double y)", "option4": "floor(double x, double y)", "ans": "Ans : C Explanation: double fmod(double x, double y) : The C library function double fmod(double x, double y) returns the remainder of x divided by y. "}, {"question": "10.\u00a0All the functions available in this library take double as an argument and return double as the result.\n", "option1": "Yes", "option2": "No", "option3": "Can be yes or no", "option4": "Can not say", "ans": "Ans : A Explanation: Yes, All the functions available in this library take double as an argument and return double as the result."},
{"question": "1.\u00a0The C programming language provides a keyword called _________, which you can use to give a type a new name.\n", "option1": "type", "option2": "typedef", "option3": "typed", "option4": "tpdef", "ans": "Ans : B Explanation: The C programming language provides a keyword called typedef, which you can use to give a type a new name."}, {"question": "2.\u00a0can we use typedef to give a name to your user defined data types as well?\n", "option1": "TRUE", "option2": "FALSE", "option3": "Can be true or false", "option4": "Can not say", "ans": "Ans : A Explanation: True, we can use typedef to give a name to your user defined data types as well"}, {"question": "3.\u00a0___________ is a C-directive which is also used to define the aliases for various data types.\n", "option1": "#const", "option2": "#def", "option3": "#define", "option4": "#dir", "ans": "Ans : C Explanation: #define is a C-directive which is also used to define the aliases for various data types"}, {"question": "4.\u00a0__________ statements are processed by the pre-processor.\n", "option1": "#def", "option2": "typedef", "option3": "type", "option4": "#define", "ans": "Ans : D Explanation: typedef interpretation is performed by the compiler whereas #define statements are processed by the pre-processor."}, {"question": "5.\u00a0What will be output for the following code?\n#include <stdio.h>\r\n#define TRUE  1\r\n \r\nint main( ) {\r\n   printf( \"\"Value of TRUE : %d\n\"\", TRUE);\r\n   return 0;\r\n}", "option1": "0", "option2": "1", "option3": "null", "option4": "garbage", "ans": "Ans : B Explanation: Value of TRUE : 1"}, {"question": "6.\u00a0Which option should be selected to work the following C expression?\nstring p = \"HELLO\";", "option1": "typedef char [] string;", "option2": "typedef char [] string; and typedef char *string;", "option3": "typedef char *string;", "option4": "Such expression cannot be generated in C", "ans": "Ans : C Explanation: typedef char *string;"}, {"question": "7.\u00a0typedef int (*PFI)(char *, char *)creates ___________\n", "option1": "type PFI, for pointer to function (of two char * arguments) returning int", "option2": "error", "option3": "type PFI, function (of two char * arguments) returning int", "option4": "type PFI, for pointer", "ans": "Ans : A Explanation: typedef int (*PFI)(char *, char *)creates  type PFI, for pointer to function (of two char * arguments) returning int"}, {"question": "8.\u00a0What will be the output of the following C code?\n#include <stdio.h>\r\ntypedef struct student\r\n    {\r\n        char *a;\r\n    }stu;\r\n    void main()\r\n    {\r\n        struct stu s;\r\n        s.a = \"\"hi\"\";\r\n        printf(\"\"%s\"\", s.a);\r\n    }\r\n", "option1": "hi", "option2": "h", "option3": "Compile time error", "option4": "varies", "ans": "Ans : C Explanation: error: storage size of s is not known struct stu s;"}, {"question": "9.\u00a0What will be the output of the following C code?\n#include <stdio.h>\r\ntypedef struct student\r\n    {\r\n        char *a;\r\n    }stu;\r\n    void main()\r\n    {\r\n        struct student s;\r\n        s.a = \"\"hey\"\";\r\n        printf(\"\"%s\"\", s.a);\r\n    }\r\n", "option1": "Compile time error", "option2": "varies", "option3": "he", "option4": "hey", "ans": "Ans : D Explanation: hey will be the output of the following C code"}, {"question": "10.\u00a0#define\u00a0can be used to define alias for values as well\n", "option1": "TRUE", "option2": "FALSE", "option3": "Can be true or false", "option4": "Can not say", "ans": "Ans : A Explanation: True, typedef is limited to giving symbolic names to types only where as #define can be used to define alias for values as well, q., you can define 1 as ONE etc."}]

















